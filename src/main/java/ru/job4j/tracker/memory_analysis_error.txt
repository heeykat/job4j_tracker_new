# Анализ работы памяти программы job4j_tracker через JConsole с выходом за пределы памяти

## Инструмент
Использован инструмент: JConsole (Heap Memory Usage), с включением JMX для мониторинга JVM.

## Условия
1. Приложение: job4j_tracker с реализацией MemTracker.
2. Действия:
   - Добавлено 1 000 000 заявок через пункт меню "CreateManyItems" (до получения ошибки java.lang.OutOfMemoryError)
3. JVM запущена с флагами:
-Xms16m -Xmx16m -XX:+UseG1GC -Dcom.sun.management.jmxremote


## Результаты наблюдений
- Heap Memory Usage: постепенно увеличивался с 5 МБ до 15 МБ, после чего достиг предела.
- Eden Space: наблюдались регулярные скачки от 0 до 4 МБ (характерное поведение при срабатывании Minor GC).
- Survivor Space: около 0,6 МБ, периодически изменялся в зависимости от активности GC.
- Old Generation: увеличивался с 5 МБ до 15 МБ, после чего память исчерпалась.

## Выводы
1. При ограничении кучи до 16 МБ программа не способна обработать 1 000 000 объектов — возникает ошибка OutOfMemoryError.
2. На графике Heap Memory Usage видно постепенное заполнение памяти и частые циклы сборки мусора (Minor GC).
3. Eden Space активно очищается, однако большая часть объектов переходит в Old Generation, заполняя её полностью.
4. После достижения лимита кучи JVM не может выделить память под новые объекты, что приводит к java.lang.OutOfMemoryError: Java heap space.
5. Поведение сборщика мусора G1GC соответствует ожидаемому: он пытается освободить память, но объём создаваемых объектов превышает доступный размер кучи.

## Общий вывод
Эксперимент подтвердил, что при малом объёме кучи (16 МБ) программа job4j_tracker при массовом создании объектов вызывает исчерпание памяти и завершение с ошибкой OutOfMemoryError.
Мониторинг через JConsole позволяет наглядно увидеть процесс роста использования памяти, работу сборщика мусора и момент достижения предела Heap.
